---
title: "CLAMS Forth Design Overview"
author: "M. Edward (Ed) Borasky"
bibliography: REFERENCES.bib
---

>  "If you've seen one Forth, well, you've seen one Forth."
\~ Unknown

## Requirements

1. Compatibility with the Raspberry Pi Pico C/C++ SDK, drivers, and
libraries: The ability to use the massive toolset the SDK and community
open source projects provide is absolutely crucial to minimize developer
time for complex projects. The USB and WiFi / Bluetooth stacks alone would
take many months to duplicate in Forth.

2. Optimized for speed: CLAMS Forth will be written in RP2040 assembly
[@smith2021rp2040]. CLAMS Forth will provide an RP2040 assembler, will use
subroutine threading and will allow both calling and inlining `CODE` words
written in assembly [@pintaske2018moving].

3. Cooperative multitasking: The RP2040 has two cores, and each core has a
divide coprocessor and two interpolators [@smith2021rp2040, chapter 12].
In addition, the RP2040 has two programmable input / output (PIO)
blocks. Cooperative multitasking provides a way of exploiting this
available concurrency and is well-supported by the SDK.

4. An enhanced Forth virtual machine, providing registers for indexing and
intermendiate results as defined in [@pelc2008updating].

5. A high-speed digital signal processing library.

## Desiderata

1. Forth 2012 standard compatibility [@forth2022] is a strong desire but
not an absolute requirement. The assembler is, of course, not part of
the standard. And there is currently no standard for cooperative
multitasking; CLAMS Forth will provide an implementation based on the tools
available in the RP2040 and the SDK.

    Optional word sets implemented:
        - Search-Order
        - Programming-Tools

    Custom word sets implemented:
        - Cooperative multitasking
        - High-speed digital signal processing

2. Portability to other boards with the RP2040 microcontroller is possible,
but is not on the roadmap yet. As with CLAMS itself, the initial target is the
Pimoroni PicoVision's onboard Rapsberry Pi Pico W.

3. Floating point support is desirable, but is a fairly low priority. The
RP2040 bootrom provides optimized floating point libraries, but there's
no hardware floating point on the RP2040, so it's not obvious how useful
this capability will be.
