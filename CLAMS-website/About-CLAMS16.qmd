---
title: "About CLAMS16"
author: "M. Edward (Ed) Borasky"
bibliography: REFERENCES.bib
---

>  "If you've seen one Forth, well, you've seen one Forth."
\~ Unknown

## Overview

`CLAMS16` is a 16-bit Forth for the Raspberry Pi Pico.

1. Requirements
    - Compatibility with the Raspberry Pi Pico C/C++ SDK, drivers, and
libraries: The ability to use the massive toolset the SDK and community
open source projects provide is absolutely crucial to minimize developer
time for complex projects. The USB and WiFi / Bluetooth stacks alone would
take many months to duplicate in Forth.
    - Optimized for speed: CLAMS16 will be written in RP2040 assembly
[@smith2021rp2040]. CLAMS16 will provide an RP2040 assembler, will use
subroutine threading and will allow both calling and inlining `CODE` words
written in assembly [@pintaske2018moving].
    - Cooperative multitasking: The RP2040 has two cores, and each core has a
    divide coprocessor and two interpolators. In addition, the RP2040 has
    two programmable input / output (PIO) blocks. Cooperative multitasking
    provides a way of exploiting this available concurrency and is
    well-supported by the SDK.
2.  Desiderata
    - Forth 2012 standard compatibility [@forth2022] is a strong desire but not an absolute
requirement. The assembler is, of course, not part of the standard. And
there is currently no standard for cooperative multitasking; CLAMS16's 
will be implementation-dependent and closely following the tools availble
in the RP2040 and the SDK.
    - Portability to other boards with the RP2040 microcontroller is possible,
but is not on the roadmap yet. As with CLAMS itself, the initial target is the
Pimoroni PicoVision's onboard Rapsberry Pi Pico W.
    - An enhanced Forth virtual machine, providing registers for indexing and
intermendiate results as defined in [@pelc2008updating].

## Why only 16 bits?
Since the RP2040 is a 32-bit processor, why only build a 16-bit Forth?

1. The RP2040 does not provide full-width multiply. A true 32-bit
architecture would allow multiplying two 32-bit integers to form
a 64-bit product in two registers.

    The RP2040 can multiply two 32-bit integers, but only delivers
    the lower 32 bits of the product. This makes standard Forth
    multiple-precision operations like `*/MOD` difficult to code for a
    32-bit Forth.
2. A 16-bit Forth uses less RAM. The RP2040 only has 264 kilobytes of
SRAM, and the intended application, music synthesis, requires numerous
tables and buffers, not all of which can be stored in flash.

    A 16-bit Forth can address a maximum of 65,536 bytes for its
    dictionary. This means that each core can have its own dictionary,
    stacks, user variables and task control blocks, leaving about half of
    the available SRAM usable for buffers and tables.

## But what about audio quality?
This has been a concern of mine since I first conceived CLAMS, but there are
numerous examples of successful music projects that use 16-bit pulse-code
modulation data. The compact disk (CD) is, of course, one example, but there
are others.

CLAMS16 will have the full complement of double-precision operations a Forth
2012 standard system requires, and it will also have a library of
block-floating-point vector operations, using shared SRAM outside of the
dictionaries. Where precision above 16 bits is required, it will be provided.