---
title: "CLAMS Design Overview"
author: "M. Edward (Ed) Borasky"
bibliography: REFERENCES.bib
---

> "Remember, if you're traveling to Bactria, Hump Day is Tuesday and Thursday"
~ M. Edward (Ed) Borasky

## General capabilities

1. Cell size: while the speed and compactness of a 16-bit Forth are tempting,
high-quality audio requires at least 24 bits during intermediate computations.
It is also unclear how easy it would be to exploit the RAM in an RP2040 beyond
a 65,536 byte dictionary. So CLAMS will have a 32-bit cell size.

2. Raspberry Pi Pico C/C++ SDK compatibility: CLAMS will be constructed using
the Raspberry Pi Pico C/C++ SDK [@raspberrypi2023a]. CLAMS code must be able
to call code written in C, C++ or assembly. See [@smith2021rp2040] for the
details.

3. Arithmetic: because of the hardware limitations of the RP2040, calculations
will need to be done in fixed point arithmetic. Standard Forth has a variety of
integer operations available, but audio and digital signal processing will require
adding fixed point fractional and block floating point arithmetic. See
[@liu2008embedded, chapter 2] for the details.

## Forth extensions

1. DSP extensions to the Forth virtual machine: Stephen Pelc [@pelc2008updating]
has proposed adding some registers to the canonical Forth virtual machine to
facilitate digital signal processing and memory management. CLAMS will use this
virtual machine design.

2. Arm Cortex M0+ assembler: CLAMS will provide a Forth assembler for the Arm
Cortex M0+ instruction set architecture. This will require the search order
extension to the Forth 2012 standard [@forth2022, chapter 16].

3. Cooperative multitasking: Although it's not yet part of the standard, many
Forth implementations have provided cooperative multitasking. CLAMS will provide
a version similar to that defined by `gforth` [@gforthGforthManual, section 6.27].

## Audio and digital signal processing

1. Block floating point vector library: CLAMS will provide a library of block
floating point vector operations, including convolution and fast Fourier
transforms.

2. Audio output: CLAMS will provide mechanisms for playing blocks of stereo
data to a digital-analog converter (DAC). Two channels of any bit-width up to
24 bits at a sample rate of at least 44.1 kHz will be supported. The target
hardware does not have audio input, so that will not be supported for the
initial release.

3. Analysis and synthesis algorithms: The goal is to eventually provide all the
analysis and synthesis algorithms in _Spectral Music Design_
[@lazzarini2021spectral] and _Tuning, Timbre, Spectrum, Scale_
[@sethares2013tuning], but algorithms will be added as needed on a
composition-by-composition basis.

4. Stochastic operations: As with analysis and synthesis algorithms, these will
be added on an as-needed basis.

## Input / output
1. SD card audio file operations: CLAMS will provide the ability to read and write
`WAV` files to and from the SD card.

2. SD card Forth BLOCK operations: CLAMS will provide these as defined in
[@forth2022]. A BLOCK editor will also be provided.

3. USB serial connectivity: CLAMS will provide the standard Forth outer
interpreter read-eval-print loop (REPL) to the USB port, seen by a host computer
as a serial port. I can't guarantee it will be tested on MacOS, but it will be
tested on Windows 11, Raspberry Pi OS, and browsers on Windows and ChromeOS that
support USB serial connections.

## Displays / HDMI

This is a new capability for CLAMS, so I can't give many details. The plan is to
support all of the capabilities of the PicoVision HDMI output. Watch this space!
