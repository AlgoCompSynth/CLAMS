---
title: "CLAMS Design Overview"
author: "M. Edward (Ed) Borasky"
bibliography: REFERENCES.bib
---

> "Remember, if you're traveling to Bactria, Hump Day is Tuesday and Thursday"
~ M. Edward (Ed) Borasky

## General capabilities

1. Cell size: while the speed and compactness of a 16-bit Forth are tempting,
high-quality audio requires at least 24 bits during intermediate computations.
It is also unclear how easy it would be to exploit the RAM in an RP2040 beyond
a 65,536 byte dictionary. So CLAMS will have a 32-bit cell size.

2. Raspberry Pi Pico C/C++ SDK compatibility: CLAMS will be constructed using
the Raspberry Pi Pico C/C++ SDK [@raspberrypi2023a]. CLAMS code must be able
to call code written in C, C++ or assembly. See [@smith2021rp2040] for the
details.

3. Arithmetic: because of the hardware limitations of the RP2040, calculations
will need to be done in fixed point arithmetic. Standard Forth has a variety of
integer operations available, but audio and digital signal processing will require
adding fixed point fractional and block floating point arithmetic. See
[@liu2008embedded, chapter 2] for the details.

## Forth extensions

1. DSP extensions to the Forth virtual machine: Stephen Pelc [@pelc2008updating]
has proposed adding some registers to the canonical Forth virtual machine to
facilitate digital signal processing and memory management. CLAMS will use this
virtual machine design.

2. Arm Cortex M0+ assembler: CLAMS will provide a Forth assembler for the Arm
Cortex M0+ instruction set architecture. This will require the search order
extension to the Forth 2012 standard [@forth2022, chapter 16].

3. Cooperative multitasking: Although it's not yet part of the standard, many
Forth implementations have provided cooperative multitasking. CLAMS will provide
a version similar to that defined by `gforth` [@gforthGforthManual, section 6.27].